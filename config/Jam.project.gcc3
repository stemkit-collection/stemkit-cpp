# vim: ft=jam: sw=2:

project.MAKE_DLL = true ;

# project.LIB_PREFIX = $(JAMCONFIG_LIBRARY_PREFIX) ;
project.LIB_MAJOR = $(JAMCONFIG_LIBRARY_MAJOR) ;

PRODUCT_NAME = $(JAMCONFIG_PRODUCT_NAME) ;
PRODUCT_RELEASE = $(JAMCONFIG_PRODUCT_RELEASE) ;
PRODUCT_BUILD = $(JAMCONFIG_PRODUCT_BUILD) ;
PRODUCT_TAG = $(JAMCONFIG_PRODUCT_TAG) ;
PRODUCT_PLATFORM = $(JAMCONFIG_PRODUCT_PLATFORM) ;

# project.DISTRIB_ENV = $(SRCTOP:J=/)/project/config/environment ;
project.DISTRIB_PRODINFO = $(SRCTOP:J=/)/install/prodinfo ;
project.DO_NOT_BUILD = ruby java ;

TOOLS_HOME = /opt/quest/platform/$(JAMCONFIG_PRODUCT_PLATFORM) ;

GCC_VERSION ?= 3.4 ;
SWIG_VERSION = 1.3 ;
project.RUBY_DIR = $(TOOLS_HOME)/ruby-1.8/lib/ruby/1.8/$(RUBY_PLATFORM) ;
project.JAVA_HOME = $(TOOLS_HOME)/java/jdk-1.5 ;
project.JAVA_INCLUDES = $(project.JAVA_HOME)/include ;

BOOST_VERSION = 1_32 ;
CPPUNIT_VERSION = 1.12 ;

C++ = ;
CC = ;
AR = ;

CCLDFLAGS = ;
LDFLAGS = ;
DLLFLAGS = ;
LD_EXPORT_DYNAMIC = -Wl,-E ;

# C++FLAGS = -Werror -Wreturn-type -Wno-ctor-dtor-privacy -Wunused-parameter ;
C++FLAGS = -Werror -Wreturn-type -Wno-ctor-dtor-privacy ;
CCFLAGS = -Werror -Wreturn-type ;

DEFINES  = _REENTRANT _THREAD_SAFE ;

if $(JAM_OFFSET_PLATFORM) = true {
  system.setup-artifact-offsets : : $(PRODUCT_PLATFORM) ;
}

PLATFORM_IMPLEMENTATION = unix ;

project.DO_ABORT_TEST = false ;

rule platform-nt-x86-win32
{
  PLATFORM_IMPLEMENTATION = win32 ;

  project.PLATFORM_SPECIFICS = windows ;
  util.delete-from project.DO_NOT_BUILD : java ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include windows-visual-studio ] ;

  project.JAVA_HOME = [ util.make-path "C:" "Program Files (x86)" "Java" "jdk1.5.0_15" ] ;
  project.JAVA_INCLUDES = [ util.make-path $(project.JAVA_HOME) include ] ;
  project.JAVA_INCLUDES += [ util.make-path $(project.JAVA_HOME) include win32 ] ;

  JAVAC = [ util.make-path $(project.JAVA_HOME) bin javac.exe ] ;
  JAR = [ util.make-path $(project.JAVA_HOME) bin jar.exe ] ;
  SWIG = [ util.make-path $(TOOLS_HOME) swigwin-1.3.35 swig.exe ] ;
}

rule platform-nt-x86-mks32
{
  project.PLATFORM_SPECIFICS = mks32 ;
  UNIX_FLAVOR = mks32 ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include windows-mks32 ] ;

  core.ensure-defined JAM_MKS_ROOT ;
  mswin.setup-mks-toolkit8 "$(JAM_MKS_ROOT:J= )" ;

  jam.NO_PTHREAD_LIB = true ;
}

rule platform-nt-x86
{
  core.load-config Jam.windows ;

  project.MAKE_DLL = false ;
  project.DO_NOT_USE_LIBRARY_MAJOR = true ;
  project.CURSES_LIBS = ;

  TOOLS_HOME = [ util.make-path C: qtools ] ;
  CONTRIB_ROOT = [ util.make-path $(TOOLS_HOME) build visual-studio-8 ] ;

  CPPUNIT_VERSION = 1.12 ;
  UNITTEST_LIBS = cppunit ;

  CCDFLAGS = ;
  CCOFLAGS = ;
  C++FLAGS = ;
  CCFLAGS = ;

  INCLUDES = ;
  LIBDIRS = ;

  switch $(BUILD_ABI) {
    case win32 : platform-nt-x86-win32 ;
    case mks32 : platform-nt-x86-mks32 ;
    case * : exit Please set BUILD_ABI to either "win32" or "mks32" ;
  }
  core.ensure-defined JAM_MSVS_ROOT ;
  mswin.setup-visual-studio8 "$(JAM_MSVS_ROOT:J= )" ;

  USE_GLOBAL_INCLUDES_AFTER = false ;

  C++FLAGS += /MD /WL /FC /Z7 /Gy /wd4355 ;
  CCFLAGS +=  /MD /WL /FC /W3 /Z7 /Gy ;
  CCOFLAGS = /Od ;

  LINKER_FLAGS += /STACK:9000000 /MACHINE:X86 /NODEFAULTLIB:LIBCMT.LIB /NODEFAULTLIB:LIBCP.LIB /DEBUG ;
  DEFINES += NDEBUG WINVER=0x0501 _WIN32_WINNT=0x0501 _USE_32BIT_TIME_T _LARGEFILE64_SOURCE ;
  SYSLIBS = shlwapi advapi32 user32 psapi ;
}

rule platform-linux-x86
{
  UNIX_FLAVOR = linux ;
  util.delete-from project.DO_NOT_BUILD : ruby java ;
  project.PLATFORM_SPECIFICS = linux ;

  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include linux ] ;
  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/linux ;

  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = linux ;
}

rule platform-linux-ia64
{
  platform-linux-x86 ;
  project.DO_NOT_BUILD += ruby java ;
}

rule platform-linux-amd64
{
  UNIX_FLAVOR = linux ;

  C++FLAGS += -fPIC -m32 ;
  CCFLAGS += -fPIC -m32 ;
  DEFINES += ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include linux ] ;
  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/linux ;

  SYSLIBS = crypt dl ;
  LDFLAGS += -m elf_i386 ;

  project.PLATFORM_SPECIFICS = linux ;
  project.PTY_SPECIFICS = linux ;
}

rule platform-osf-alpha
{
  TOOLS_HOME = /opt/quest/platform/$(JAMCONFIG_PRODUCT_PLATFORM) ;
  GCC_ROOT = $(TOOLS_HOME)/gcc-$(GCC_VERSION) ;
  CPPUNIT_VERSION = 1.12 ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += snprintf=trio_snprintf ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include osf ] ;
  SYSLIBS = trio ;

  CC_SONAME_FLAG = "-Wl,-soname," ;
  DLLFLAGS = -shared -Wl,-expect_unresolved,* ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-aix-ppc
{
  project.MAKE_DLL = false ;
  CCOFLAGS ?= -O0 -fno-guess-branch-probability ;

  C++LDFLAGS =
    -Wl,-bmaxdata:0x50000000
    -Wl,-u__TSC_BUILD__
  ;
  # DEFINES += _POSIX_PTHREAD_SEMANTICS _FILE_OFFSET_BITS=64 _LARGE_FILES ;
  DEFINES += _POSIX_PTHREAD_SEMANTICS _FILE_OFFSET_BITS=64 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include aix ] ;
  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = aix ;
}

rule platform-macos
{
  project.DO_ABORT_TEST = true ;

  UNIX_FLAVOR = macosx ;
  project.MAKE_DLL = false ;

  TOOLS_HOME = /opt/sk/platform/$(JAMCONFIG_PRODUCT_PLATFORM) ;

  GCC_VERSION = 4.2 ;
  CPPUNIT_VERSION = 1.12 ;

  CC = gcc-4.2 ;
  C++ = g++-4.2 ;

  CCLDFLAGS = ;
  LDFLAGS = ;
  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += ;
  INCLUDES += ;
  SYSLIBS = ;

  DLLFLAGS = -dynamiclib ;
  C++LDFLAGS += ;
  CC_SONAME_FLAG = -Wl,+h ;
  jam.DSO_EXTENTION = dylib ;
  RANLIB = ranlib -s ;

  project.PTY_SPECIFICS = posix ;
  project.RUBY_DIR = ;
  project.JAVA_HOME = ;
}

rule platform-macos-tiger
{
  platform-macos ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include macos-tiger ] ;
}

rule platform-macos-leopard
{
  platform-macos ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include macos-leopard ] ;
}


rule platform-solaris-sparc
{
  util.delete-from project.DO_NOT_BUILD : ruby java ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += _FILE_OFFSET_BITS=64 _POSIX_PTHREAD_SEMANTICS ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;
  SYSLIBS = socket nsl gen rt ;

  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/solaris ;
  project.PTY_SPECIFICS = streams ;
}

rule platform-solaris6-sparc
{
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris6 ] ;
  platform-solaris-sparc ;
  SYSLIBS = socket nsl gen ;
}

rule platform-solaris-x86
{
  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += _FILE_OFFSET_BITS=64 _POSIX_PTHREAD_SEMANTICS ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;
  SYSLIBS = socket nsl gen rt ;

  project.PTY_SPECIFICS = streams ;
}

rule platform-hpux-pa
{
  project.MAKE_DLL = true ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += _FILE_OFFSET_BITS=64 _LARGEFILE64_SOURCE _REENTRANT ;
  DEFINES += _XOPEN_SOURCE _XOPEN_SOURCE_EXTENDED=1 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;
  jam.DSO_EXTENTION = sl ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-hpux-ia64
{
  project.MAKE_DLL = true ;

  switch $(BUILD_ABI) {
    case 32 : CC_ABI_FLAGS = ;
    case 64 : CC_ABI_FLAGS = -mlp64 ; BUILD_ABILIB = lib64 ;
    case * : exit Please set BUILD_ABI to either 32 or 64 ;
  }
  C++FLAGS += $(CC_ABI_FLAGS) -fPIC ;
  CCFLAGS += $(CC_ABI_FLAGS) -fPIC ;
  DEFINES += _FILE_OFFSET_BITS=64 _LARGEFILE64_SOURCE _REENTRANT ;
  DEFINES += _XOPEN_SOURCE _XOPEN_SOURCE_EXTENDED=1 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-rh21-unsupported
{
  exit 
    Platform $(1) unsupported because of faulty thread implementation -- when
    combined with process handling, the background manager thread often dies
    without any chance to be recovered from the application itself. This is 
    one of "expected" side effects of old LixuxThreads implementation. The 
    newer one based on NPTL is free from this problem (no extra manager thread
    there).
  ;
}

switch $(PRODUCT_PLATFORM) {
  case rh-30-x86 : platform-linux-x86 ;
  case rh-40-x86 : platform-linux-x86 ;
  case rh-40-amd64 : platform-linux-amd64 ;
  case rh-40-ia64 : platform-linux-ia64 ;
  case rh-21-x86 : platform-rh21-unsupported $(PRODUCT_PLATFORM) ;
  case aix-51-ppc : platform-aix-ppc ;
  case aix-52-ppc : platform-aix-ppc ;
  case aix-53-ppc : platform-aix-ppc ;
  case osf-51-alpha : platform-osf-alpha ;
  case osf-40-alpha : platform-osf-alpha ;
  case sun-10-x86 : platform-solaris-x86 ;
  case sun-10-sparc : platform-solaris-sparc ;
  case sun-9-sparc : platform-solaris-sparc ;
  case sun-8-sparc : platform-solaris-sparc ;
  case sun-6-sparc : platform-solaris6-sparc ;
  case hp11-23-pa : platform-hpux-pa ;
  case hp11-00-pa : platform-hpux-pa ;
  case hp11-11-pa : platform-hpux-pa ;
  case hp11-23-ia64 : platform-hpux-ia64 ;
  case mac-10.4-ppc : platform-macos-tiger ;
  case mac-10.4-x86 : platform-macos-tiger ;
  case mac-10.5-ppc : platform-macos-leopard ;
  case mac-10.5-x86 : platform-macos-leopard ;
  case mac-10.6-x86 : platform-macos-leopard ;
  case windows-x86 : platform-nt-x86 ;
  case * : exit Unknown platform $(PRODUCT_PLATFORM) ;
}

BUILD_ABILIB ?= lib ;

INCLUDES += [ util.make-path $(system.SRCTOP) platform include generic ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include hooks ] ;
INCLUDES += [ util.make-path $(system.GENTOP) include ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include ] ;

GCC_ROOT ?= $(TOOLS_HOME)/gcc-$(GCC_VERSION) ;

GCC_STDLIBS ?= libstdc++.so libgcc_s.so ;
CONTRIB_ROOT ?= $(GCC_ROOT)/contrib ;

C++ ?= $(GCC_ROOT)/bin/g++ ;
CC ?= $(GCC_ROOT)/bin/gcc ;

SWIG ?= $(TOOLS_HOME)/swig-$(SWIG_VERSION)/bin/swig ;

LIBDIRS += $(GCC_ROOT)/lib ;

CCOFLAGS ?= -O2 -fno-guess-branch-probability ;
DLLFLAGS ?= -shared ;

UNITTEST_DIRS ?= $(CONTRIB_ROOT)/cppunit-$(CPPUNIT_VERSION) ;
UNITTEST_LIBS ?= cppunit ;

C++ALLFLAGS = $(C++FLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
CCALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
C++LDALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) $(C++LDFLAGS) ;

system.export-to-env GCC_LIB_PATHLIST : $(GCC_ROOT)/lib/$(GCC_STDLIBS) ;
system.export-to-env CONTRIB_ROOT : $(CONTRIB_ROOT) ;
system.export-to-env MAKE_DLL : $(project.MAKE_DLL) ;
system.export-to-env BUILD_ABILIB : $(BUILD_ABILIB) ;
system.export-to-env DO_NOT_BUILD : $(project.DO_NOT_BUILD) ;
