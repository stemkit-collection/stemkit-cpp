# vim: set ft=jam sw=2:

project.MAKE_DLL = true ;

# project.LIB_PREFIX = $(JAMCONFIG_LIBRARY_PREFIX) ;
project.LIB_MAJOR = $(JAMCONFIG_LIBRARY_MAJOR) ;

PRODUCT_NAME = $(JAMCONFIG_PRODUCT_NAME) ;
PRODUCT_RELEASE = $(JAMCONFIG_PRODUCT_RELEASE) ;
PRODUCT_BUILD = $(JAMCONFIG_PRODUCT_BUILD) ;
PRODUCT_TAG = $(JAMCONFIG_PRODUCT_TAG) ;
PRODUCT_PLATFORM = $(JAMCONFIG_PRODUCT_PLATFORM) ;

# project.DISTRIB_ENV = $(SRCTOP:J=/)/project/config/environment ;
project.DISTRIB_PRODINFO = $(SRCTOP:J=/)/install/prodinfo ;

TOOLS_HOME = $(HOME)/local/$(JAMCONFIG_PRODUCT_PLATFORM) ;

GCC_VERSION = 3.4.3 ;
SWIG_VERSION = 1.3 ;
project.RUBY_DIR = $(TOOLS_HOME)/ruby-1.8/lib/ruby/1.8/$(RUBY_PLATFORM) ;
project.JAVA_HOME = $(TOOLS_HOME)/java/jdk-1.5 ;
project.JAVA_INCLUDES = $(project.JAVA_HOME)/include ;

BOOST_VERSION = 1_32 ;
CPPUNIT_VERSION = 1.10 ;

C++ = ;
CC = ;
AR = ;

CCLDFLAGS = ;
LDFLAGS = ;
DLLFLAGS = ;
LD_EXPORT_DYNAMIC = -Wl,-E ;

C++FLAGS = -Werror -Wreturn-type -Wno-ctor-dtor-privacy ;
CCFLAGS = -Werror -Wreturn-type ;

DEFINES  = _REENTRANT ;

if $(JAM_OFFSET_PLATFORM) = true {
  system.setup-artifact-offsets : : $(PRODUCT_PLATFORM) ;
}

rule platform-nt-x86
{
  core.load-config Jam.windows ;

  project.MAKE_DLL = false ;
  project.DO_NOT_USE_LIBRARY_MAJOR = true ;
  project.PLATFORM_SPECIFICS = windows ;

  CPPUNIT_VERSION = 1.12 ;
  UNITTEST_LIBS = cppunit ;

  CCDFLAGS = ;
  CCOFLAGS = ;
  C++FLAGS = ;
  CCFLAGS = ;

  INCLUDES = ;
  LIBDIRS = ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include windows-visual-studio ] ;

  core.ensure-defined JAM_MSVS_ROOT ;
  mswin.setup-visual-studio8 "$(JAM_MSVS_ROOT:J= )" ;
  USE_GLOBAL_INCLUDES_AFTER = false ;

  C++FLAGS += /MD /WL /FC /Zi /Gy /wd4355 ;
  CCFLAGS +=  /MD /WL /FC /W3 /Zi /Gy ;
  CCOFLAGS = /Od ;

  LINKER_FLAGS += /STACK:9000000 /MACHINE:X86 /NODEFAULTLIB:LIBCMT.LIB /NODEFAULTLIB:LIBCP.LIB /DEBUG ;
  DEFINES += NDEBUG WINVER=0x0500 _USE_32BIT_TIME_T _LARGEFILE64_SOURCE ;
  SYSLIBS = shlwapi advapi32 user32 ;

  project.CURSES_LIBS = ;

  SWIG = /qtools/swigwin-1.3.35/swig.exe ;
  TOOLS_HOME = [ util.make-path C: qtools ] ;
  CONTRIB_ROOT = [ util.make-path $(TOOLS_HOME) build visual-studio-8 ] ;

  project.JAVA_HOME = [ util.make-path "C:" "Program Files (x86)" "Java" "jdk1.5.0_15" ] ;
  project.JAVA_INCLUDES = [ util.make-path $(project.JAVA_HOME) include ] ;
  project.JAVA_INCLUDES += [ util.make-path $(project.JAVA_HOME) include win32 ] ;

  JAVAC = [ util.make-path $(project.JAVA_HOME) bin javac.exe ] ;
  JAR = [ util.make-path $(project.JAVA_HOME) bin jar.exe ] ;
}

rule platform-linux-x86
{
  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include linux ] ;
  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/linux ;

  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = linux ;
}

rule platform-interix-x86
{
  GCC_VERSION = 3.4.6 ;
  project.MAKE_DLL = false ;

  # CC = gcc ;
  # C++ = g++ ;

  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include interix ] ;
  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = linux ;
}

rule platform-linux-amd64
{
  C++FLAGS += -fPIC -m32 ;
  CCFLAGS += -fPIC -m32 ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include linux ] ;
  SYSLIBS = crypt dl ;

  LDFLAGS += -m elf_i386 ;

  project.PTY_SPECIFICS = linux ;
}

rule platform-osf-alpha
{
  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include osf ] ;
  SYSLIBS = ;

  CC_SONAME_FLAG = "-Wl,-soname," ;
  DLLFLAGS = -shared -Wl,-expect_unresolved,* ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-aix51-ppc
{
  project.MAKE_DLL = false ;

  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include aix ] ;
  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = aix ;
}

rule platform-aix52-ppc
{
  project.MAKE_DLL = false ;

  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include aix ] ;
  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = aix ;
}

rule platform-macos
{
  project.MAKE_DLL = false ;

  GCC_VERSION = 4.0.1 ;
  CPPUNIT_VERSION = 1.12 ;

  CC = gcc-4.0 ;
  C++ = g++-4.0 ;

  CCLDFLAGS = ;
  LDFLAGS = ;
  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += ;
  INCLUDES += ;
  SYSLIBS = ;

  DLLFLAGS = -dynamiclib ;
  C++LDFLAGS += ;
  CC_SONAME_FLAG = -Wl,+h ;
  jam.DSO_EXTENTION = dylib ;
  RANLIB = ranlib -s ;

  project.PTY_SPECIFICS = posix ;
  project.RUBY_DIR = ;
  project.JAVA_HOME = ;
}

rule platform-macos-tiger
{
  platform-macos ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include macos-tiger ] ;
}

rule platform-macos-leopard
{
  platform-macos ;
}


rule platform-cygwin-x86
{
  project.MAKE_DLL = false ;

  GCC_VERSION = 3.4.4 ;

  CC = gcc ;
  C++ = g++ ;

  CCLDFLAGS = ;
  LDFLAGS = ;
  DEFINES += ;
  INCLUDES += ;
  SYSLIBS = ;
}

rule platform-solaris-sparc
{
  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += _FILE_OFFSET_BITS=64 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;
  SYSLIBS = socket nsl gen ;

  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/solaris ;
  project.PTY_SPECIFICS = streams ;
}

rule platform-solaris-x86
{
  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;
  SYSLIBS = socket nsl gen ;

  project.PTY_SPECIFICS = streams ;
}

rule platform-hpux-pa
{
  project.MAKE_DLL = true ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;
  jam.DSO_EXTENTION = sl ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-hpux-legacy-pa
{
  platform-hpux-pa ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux-legacy ] ;
}

rule platform-hpux-ia64
{
  project.MAKE_DLL = true ;

  GCC_ROOT = $(TOOLS_HOME)/gcc-$(GCC_VERSION) ;
  CONTRIB_ROOT = $(GCC_ROOT)/contrib-m64 ;

  C++FLAGS += -mlp64 -fPIC ;
  CCFLAGS += -mlp64 -fPIC ;
  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;

  project.PTY_SPECIFICS = streams-hp ;
}

switch $(PRODUCT_PLATFORM) {
  case rh-30-x86 : platform-linux-x86 ;
  case rh-40-x86 : platform-linux-x86 ;
  case rh-40-amd64 : platform-linux-amd64 ;
  case rh-40-ia64 : platform-linux-x86 ;
  case rh-21-x86 : platform-linux-x86 ;
  case aix-51-ppc : platform-aix51-ppc ;
  case aix-52-ppc : platform-aix52-ppc ;
  case aix-53-ppc : platform-aix52-ppc ;
  case osf-51-alpha : platform-osf-alpha ;
  case osf-40-alpha : platform-osf-alpha ;
  case sun-10-x86 : platform-solaris-x86 ;
  case sun-10-sparc : platform-solaris-sparc ;
  case sun-9-sparc : platform-solaris-sparc ;
  case sun-8-sparc : platform-solaris-sparc ;
  case hp11-23-pa : platform-hpux-pa ;
  case hp11-00-pa : platform-hpux-legacy-pa ;
  case hp11-11-pa : platform-hpux-legacy-pa ;
  case hp11-23-ia64 : platform-hpux-ia64 ;
  case mac-10.4-ppc : platform-macos-tiger ;
  case mac-10.4-x86 : platform-macos-tiger ;
  case mac-10.5-ppc : platform-macos-leopard ;
  case mac-10.5-x86 : platform-macos-leopard ;
  case cygwin-xp-x86 : platform-cygwin-x86 ;
  case win32-sfu-x86 : platform-interix-x86 ;
  case windows-x86 : platform-nt-x86 ;
  case * : exit Unknown platform $(PRODUCT_PLATFORM) ;
}

INCLUDES += [ util.make-path $(system.SRCTOP) platform include generic ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include hooks ] ;
INCLUDES += [ util.make-path $(system.GENTOP) include ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include ] ;

GCC_ROOT ?= $(TOOLS_HOME)/gcc-$(GCC_VERSION) ;

GCC_STDLIBS ?= libstdc++.so libgcc_s.so ;
CONTRIB_ROOT ?= $(GCC_ROOT)/contrib ;

C++ ?= $(GCC_ROOT)/bin/g++ ;
CC ?= $(GCC_ROOT)/bin/gcc ;

SWIG ?= $(TOOLS_HOME)/swig-$(SWIG_VERSION)/bin/swig ;

LIBDIRS += $(GCC_ROOT)/lib ;

CCOFLAGS ?= -O0 -fno-guess-branch-probability ;
DLLFLAGS ?= -shared ;

UNITTEST_DIRS ?= $(CONTRIB_ROOT)/cppunit-$(CPPUNIT_VERSION) ;
UNITTEST_LIBS ?= cppunit ;

C++ALLFLAGS = $(C++FLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
CCALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
C++LDALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) $(C++LDFLAGS) ;

system.export-to-env GCC_LIB_PATHLIST : $(GCC_ROOT)/lib/$(GCC_STDLIBS) ;
system.export-to-env CONTRIB_ROOT : $(CONTRIB_ROOT) ;
system.export-to-env MAKE_DLL : $(project.MAKE_DLL) ;
