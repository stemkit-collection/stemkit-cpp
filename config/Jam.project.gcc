# vim: ft=jam: sw=2:

core.load-plugin platform ;
core.load-plugin gcc ;

project.MAKE_LIBRARY_DEFAULT = static ;

# project.LIB_PREFIX = $(JAMCONFIG_LIBRARY_PREFIX) ;
project.LIB_MAJOR = $(JAMCONFIG_LIBRARY_MAJOR) ;

PRODUCT_NAME = $(JAMCONFIG_PRODUCT_NAME) ;
PRODUCT_RELEASE = $(JAMCONFIG_PRODUCT_RELEASE) ;
PRODUCT_BUILD = $(JAMCONFIG_PRODUCT_BUILD) ;
PRODUCT_TAG = $(JAMCONFIG_PRODUCT_TAG) ;
PRODUCT_PLATFORM = $(platform.NAME) ;

# project.DISTRIB_ENV = $(SRCTOP:J=/)/project/config/environment ;
project.DISTRIB_PRODINFO = $(SRCTOP:J=/)/install/prodinfo ;
project.DO_NOT_BUILD = ruby java ;

TOOLS_HOME = /opt/quest/platform/$(platform.NAME) ;

GCC_VERSION ?= 4.6 ;
SWIG_VERSION = 1.3 ;
project.RUBY_DIR = $(TOOLS_HOME)/ruby-1.8/lib/ruby/1.8/$(RUBY_PLATFORM) ;
project.JAVA_HOME = $(TOOLS_HOME)/java/jdk-1.5 ;
project.JAVA_INCLUDES = $(project.JAVA_HOME)/include ;
project.USE_PRODUCT_RELEASE_IN_DLL = true ;

BOOST_VERSION = 1_32 ;
CPPUNIT_VERSION = 1.12 ;

C++ = ;
CC = ;
AR = ;

CCLDFLAGS = ;
LDFLAGS = ;
DLLFLAGS = ;
LD_EXPORT_DYNAMIC = -Wl,-E ;

# C++FLAGS = -Werror -Wreturn-type -Wno-ctor-dtor-privacy -Wunused-parameter ;
C++FLAGS = -Werror -Wreturn-type -Wno-ctor-dtor-privacy ;
CCFLAGS = -Werror -Wreturn-type ;

DEFINES  = _REENTRANT _THREAD_SAFE ;

PLATFORM_IMPLEMENTATION = unix ;

project.DO_ABORT_TEST = false ;

rule local.mswin-x86.setup 
{
  local _mode = $(1) ;
  local _block = $(2) ;

  core.load-config Jam.windows ;

  TOOLS_HOME = [ util.make-path C: qtools ] ;
  CONTRIB_ROOT = [ util.make-path $(TOOLS_HOME) build visual-studio-8 ] ;

  project.PROHIBIT_SHARED = true ;
  project.DO_NOT_USE_LIBRARY_MAJOR = true ;
  project.CURSES_LIBS = ;

  project.JAVA_HOME = [ util.make-path "C:" "Program Files (x86)" "Java" "jdk1.5.0_15" ] ;
  project.JAVA_INCLUDES = 
    [ util.make-path $(project.JAVA_HOME) include ]
    [ util.make-path $(project.JAVA_HOME) include win32 ]
  ;

  JAVAC = [ util.make-path $(project.JAVA_HOME) bin javac.exe ] ;
  JAR = [ util.make-path $(project.JAVA_HOME) bin jar.exe ] ;
  SWIG = [ util.make-path $(TOOLS_HOME) swigwin-1.3.35 swig.exe ] ;

  CPPUNIT_VERSION = 1.12 ;
  UNITTEST_LIBS = cppunit ;

  CCDFLAGS = ;
  CCOFLAGS = ;
  C++FLAGS = ;
  CCFLAGS = ;

  INCLUDES = ;
  LIBDIRS = ;

  if $(_block) {
    $(_block) $(_mode) ;
  }
  core.ensure-defined JAM_MSVS_ROOT ;
  mswin.setup-visual-studio8-m$(_mode) "$(JAM_MSVS_ROOT:J= )" ;

  USE_GLOBAL_INCLUDES_AFTER = false ;

  C++FLAGS += /GL /MD /WL /FC /Z7 /Gy /wd4355 /WX ;
  CCFLAGS +=  /GL /MD /WL /FC /W3 /Z7 /Gy /WX ;
  CCOFLAGS = /Od ;

  switch $(_mode) {
    case 32 : 
      LINKER_FLAGS += /MACHINE:X86 ;
      DEFINES += _USE_32BIT_TIME_T ;

    case 64 : 
      LINKER_FLAGS += /MACHINE:X64 ;
  }
  AR = $(AR) /LTCG ;

  LINKER_FLAGS += 
    /STACK:9000000 
    /LTCG
    /NODEFAULTLIB:LIBCMT.LIB
    /NODEFAULTLIB:LIBCP.LIB 
    /DEBUG 
  ;
  DEFINES += NDEBUG WINVER=0x0501 _WIN32_WINNT=0x0501 _LARGEFILE64_SOURCE ;
  SYSLIBS = shlwapi advapi32 user32 psapi $(windows.EXTRA_SYSLIBS) ;
}

rule local.mswin-x86.native
{
  local _mode = $(1) ;
  platform.setup-abi-lib lib$(_mode)-win ;

  PLATFORM_IMPLEMENTATION = win32 ;
  project.PLATFORM_SPECIFICS = windows ;
  # util.delete-from project.DO_NOT_BUILD : java ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include windows-visual-studio ] ;
  windows.EXTRA_SYSLIBS = ws2_32 ;
}

rule local.mswin-x86.mks
{
  local _mode = $(1) ;
  platform.setup-abi-lib lib$(_mode)-mks ;

  project.PLATFORM_SPECIFICS = mks32 ;
  UNIX_FLAVOR = mks32 ;

  C++FLAGS += /Zl ;
  CCFLAGS += /Zl ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include windows-mks32 ] ;

  JAM_MKS_ROOT_$(_mode) ?= $(JAM_MKS_ROOT) ;
  core.ensure-defined JAM_MKS_ROOT_$(_mode) ;
  mswin.setup-mks-toolkit8-m$(_mode) "$(JAM_MKS_ROOT_$(_mode):J= )" ;

  LINKER_FLAGS += 
    /NODEFAULTLIB:MSVCRT.LIB 
    /NODEFAULTLIB:MSVCPRT.LIB 
    /NODEFAULTLIB:LIBC.LIB 
  ;

  jam.NO_PTHREAD_LIB = true ;
}

rule platform-mswin-x86-m64-win
{
  local.mswin-x86.setup 64 : local.mswin-x86.native ;
}

rule platform-mswin-x86-m32-win
{
  local.mswin-x86.setup 32 : local.mswin-x86.native ;
}

rule platform-mswin-x86-m64-mks
{
  local.mswin-x86.setup 64 : local.mswin-x86.mks ;
}

rule platform-mswin-x86-m32-mks
{
  local.mswin-x86.setup 32 : local.mswin-x86.mks ;
}

rule platform-mswin-x86
{
}

rule platform-linux-x86-m32
{
  ABI_CC_FLAGS = -m32 ; 
  ABI_LD_FLAGS = -melf_i386 ;
  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;

  # util.delete-from project.DO_NOT_BUILD : ruby java ;
}

rule platform-linux-x86-m64
{
  ABI_CC_FLAGS = -m64 ; 
  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
}

rule platform-linux-x86
{
  UNIX_FLAVOR = linux ;
  project.PTY_SPECIFICS = linux ;
  project.PLATFORM_SPECIFICS = linux ;

  DEFINES += ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include linux ] ;
  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/linux ;

  SYSLIBS = crypt dl ;
}

rule platform-linux-ia64
{
  platform-linux-x86 ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;

  # project.DO_NOT_BUILD += ruby java ;
}

rule platform-osf-alpha
{
  CPPUNIT_VERSION = 1.12 ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += snprintf=trio_snprintf ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include osf ] ;
  SYSLIBS = trio ;

  CC_SONAME_FLAG = "-Wl,-soname," ;
  DLLFLAGS = -shared -Wl,-expect_unresolved,* ;

  project.PTY_SPECIFICS = streams-hp ;
}

rule platform-aix-ppc-m32
{
  ABI_CC_FLAGS = -maix32 ; 
  ABI_AR_FLAGS = -X32 ;
  platform.setup-abi-lib lib/pthread ;
}

rule platform-aix-ppc-m64
{
  ABI_CC_FLAGS = -maix64 ; 
  ABI_AR_FLAGS = -X64 ;
  platform.setup-abi-lib lib64/pthread ;
}

rule platform-aix-ppc
{
  core.load-config Jam.aix ;

  C++FLAGS += -fPIC -pthread ;
  CCFLAGS += -fPIC -pthread ;

  C++LDFLAGS =
    -Wl,-bmaxdata:0x50000000
    -Wl,-bh:5
    -Wl,-u__TSC_BUILD__    
    -pthread 
  ;
  CC_SONAME_FLAG = ;
  DLLFLAGS += -shared -Wl,-bexpfull ;

  LIBDIRS += /usr/lib/threads ;
  DEFINES += _POSIX_PTHREAD_SEMANTICS _FILE_OFFSET_BITS=64 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include aix ] ;
  SYSLIBS = crypt dl ;

  project.PTY_SPECIFICS = aix ;
}

rule platform-darwin-x86-m64
{
}

rule platform-darwin-x86-m32
{
}

rule platform-darwin-x86
{
  project.DO_ABORT_TEST = true ;

  UNIX_FLAVOR = macosx ;
  TOOLS_HOME = /opt/sk/platform/$(platform.NAME) ;

  GCC_VERSION = 4.2 ;
  CPPUNIT_VERSION = 1.12 ;

  CC = gcc-4.2 ;
  C++ = g++-4.2 ;

  CCLDFLAGS = ;
  LDFLAGS = ;
  C++FLAGS += -fPIC -flat_namespace ;
  C++LDFLAGS += -flat_namespace ;
  CCFLAGS += -fPIC ;
  DEFINES += ;
  INCLUDES += ;
  SYSLIBS = ;

  INCLUDES += [ util.make-path $(system.SRCTOP) platform include macos-leopard ] ;

  DLLFLAGS = -dynamiclib -Wl,-undefined,dynamic_lookup ;
  CC_SONAME_FLAG = -Wl,-headerpad_max_install_names,-install_name, ;
  jam.DSO_EXTENTION = dylib ;

  RANLIB = ranlib -s ;

  project.PTY_SPECIFICS = posix ;
  project.RUBY_DIR = ;
  project.JAVA_HOME = ;
}

rule platform-solaris-sparc-m32
{
  ABI_CC_FLAGS = -m32 ; 
}

rule platform-solaris-sparc-m64
{
  ABI_CC_FLAGS = -m64 ; 
}

rule platform-solaris-sparc
{
  # util.delete-from project.DO_NOT_BUILD : ruby java ;

  C++FLAGS += -fPIC ;
  CCFLAGS += -fPIC ;
  DEFINES += _FILE_OFFSET_BITS=64 _POSIX_PTHREAD_SEMANTICS ;

  SYSLIBS = socket nsl gen rt ;

  if $(platform.NAME) = "sun-6-sparc" {
    INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris6 ] ;
  }
  else SYSLIBS += rt ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;

  project.JAVA_INCLUDES += $(project.JAVA_HOME)/include/solaris ;
  project.PTY_SPECIFICS = streams ;
}

rule platform-solaris-x86-m32
{
  ABI_CC_FLAGS = -m32 ; 
}

rule platform-solaris-x86-m64
{
  GCC_VERSION = 4.3 ;
  ABI_CC_FLAGS = -m64 ; 
}

rule platform-solaris-x86
{
  C++FLAGS += -fpic ;
  CCFLAGS += -fpic ;
  DEFINES += _FILE_OFFSET_BITS=64 _POSIX_PTHREAD_SEMANTICS ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include solaris ] ;
  SYSLIBS = socket nsl gen rt ;

  project.PTY_SPECIFICS = streams ;
}

rule platform-hpux-pa-m32
{
}

rule platform-hpux-pa-m64
{
  GCC_ABI = 64 ;
}

rule platform-hpux-pa
{
  C++FLAGS += -fPIC -pthread ;
  CCFLAGS += -fPIC -pthread ;
  DEFINES += _FILE_OFFSET_BITS=64 _LARGEFILE64_SOURCE _REENTRANT ;
  DEFINES += _XOPEN_SOURCE _XOPEN_SOURCE_EXTENDED=1 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = pthread ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;
  jam.DSO_EXTENTION = sl ;

  project.PTY_SPECIFICS = streams-hp ;

  if $(platform.NAME) = "hp11-11-pa" {
    IPV6_PLATFORM_IMPLEMENTATION = "unsupported" ;
  }
}

rule platform-hpux-ia64-m32
{
}

rule platform-hpux-ia64-m64
{
  ABI_CC_FLAGS = -mlp64 ; 
}

rule platform-hpux-ia64
{
  C++FLAGS += -fPIC -pthread ;
  CCFLAGS += -fPIC -pthread ;
  DEFINES += _FILE_OFFSET_BITS=64 _LARGEFILE64_SOURCE _REENTRANT ;
  DEFINES += _XOPEN_SOURCE _XOPEN_SOURCE_EXTENDED=1 ;
  INCLUDES += [ util.make-path $(system.SRCTOP) platform include hpux ] ;
  SYSLIBS = pthread ;

  C++LDFLAGS += -Wl,+s ;
  CC_SONAME_FLAG = -Wl,+h ;

  project.PTY_SPECIFICS = streams-hp ;
}

platform.support-all-known ;
platform.register-unsupported-name rh-21-x86 ;
platform.register-unsupported-name hp11-00-pa ;
platform.select $(BUILD_ABI) : true ;

platform.offset-name $(JAM_OFFSET_PLATFORM) ;
platform.offset-abi $(JAM_OFFSET_ABI) ;

IPV6_PLATFORM_IMPLEMENTATION ?= $(PLATFORM_IMPLEMENTATION) ;

BUILD_ABI = $(platform.ABI) ;
BUILD_ABILIB = $(platform.ABILIB) ;

INCLUDES += [ util.make-path $(system.SRCTOP) platform include generic ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include hooks ] ;
INCLUDES += [ util.make-path $(system.GENTOP) include ] ;
INCLUDES += [ util.make-path $(system.SRCTOP) include ] ;

GCC_ROOT ?= $(TOOLS_HOME)/gcc$(GCC_ABI:E=)-$(GCC_VERSION) ;

GCC_STDLIBS ?= libstdc++.so libgcc_s.so ;
CONTRIB_ROOT ?= $(GCC_ROOT)/contrib ;

C++ ?= $(GCC_ROOT)/bin/g++ ;
CC ?= $(GCC_ROOT)/bin/gcc ;
AR ?= ar$(GCC_ABI:E=) -cq $(ABI_AR_FLAGS) ;

SWIG ?= $(TOOLS_HOME)/swig-$(SWIG_VERSION)/bin/swig ;

BUILD_ABILIB ?= lib ;
CCOFLAGS ?= -O2 -fno-guess-branch-probability ;
DLLFLAGS ?= -shared ;

UNITTEST_DIRS ?= $(CONTRIB_ROOT)/cppunit-$(CPPUNIT_VERSION) ;
UNITTEST_LIBS ?= cppunit ;

C++FLAGS += $(ABI_CC_FLAGS) ;
CCFLAGS += $(ABI_CC_FLAGS) ;
LDFLAGS += $(ABI_LD_FLAGS) ;

C++ALLFLAGS = $(C++FLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
CCALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) ;
C++LDALLFLAGS = $(CCFLAGS) $(CCDFLAGS) $(CCOFLAGS) $(C++LDFLAGS) ;

system.export-to-env GCC_LIB_PATHLIST : $(GCC_ROOT)/lib/$(GCC_STDLIBS) ;
system.export-to-env STEMKIT_INSTALL_ROOT : $(install.top:E=$(CONTRIB_ROOT)) ;
system.export-to-env BUILD_ABILIB : $(BUILD_ABILIB) ;
system.export-to-env DO_NOT_BUILD : $(project.DO_NOT_BUILD) ;

PRODUCT_ABI = $(BUILD_ABI) ;
