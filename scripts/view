#!/bin/ksh
#@(#)Title:     View changer
#@(#)Author:    Gennady F. Bystritsky (gfb@tonesoft.com)
#@(#)Version:   2.0
#@(#)Copyright: Tone Software Corporation, Inc. (1999-2000)

PRODSTAMP='
#############################################################
# View changer. Copyright(c) 2000 Tone Software Corporation #
#############################################################
'
DESCRIPTION="
  Development view changer
"
ARGUMENTS="
  [-x<debug level>][-h][-a] [<view>[@<product>]]
"
    RedirectErrors=NO
ShowCleanupMessage=NO
     ShowProdStamp=NO
           SigList="1 2 3 8 15"

UTILITY=view

main () 
{
  eval `EntryPoint 1 main`

  unset SHOW_ALL DESIRED_VIEW DESIRED_PRODUCT PROMPT
  ParseCommandParameters "a" "${@}" || {
    PrintUsage
    return 2
  }
  eval `EntryPoint 1 main`

  collectViews || return ${?} # sets VIEW_LIST and DEV_HOME

  [ "${VIEW_LIST:+set}" != set ] && {
    ErrMsg "No development views found."
    return 1
  }
  [ "${SHOW_ALL}" = yes ] && {
    echo ${VIEW_LIST} | tr ' ' '\n' 1>&4
    return 0
  }
  [ "${DESIRED_VIEW:+set}" != set ] && {
    [ "${DEV_VIEW:+set}" = set -a "${DEV_PRODUCT:+set}" = set ] && {
      echo "${DEV_VIEW}@${DEV_PRODUCT}" 1>&4
      return 0
    }
    ErrMsg "No current development view."
    return 1
  }
  eval `SetInputFields DESIRED_VIEW @`
  [ ${#} -gt 0 ] && {
    DESIRED_VIEW=${1}
    [ ${#} -gt 1 ] && {
      DESIRED_PRODUCT=${2}
    }
  }
  [ "${DESIRED_VIEW:+set}" != set ] && {
    ErrMsg "Incorrect view specification."
    return 1
  }
  : ${DESIRED_PRODUCT:=${DEV_PRODUCT}}

  [ "${DESIRED_PRODUCT:+set}" != set ] && {
    DESIRED_PRODUCT=`guessProduct` || {
      return ${?}
    }
    [ "${DESIRED_PRODUCT:+set}" != set ] && {
      ErrMsg "Cannot determine product."
      return 2
    }
  }
  [ "${DEV_VIEW}@${DEV_PRODUCT}" = "${DESIRED_VIEW}@${DESIRED_PRODUCT}" ] && {
    eval `print_info_command`
    return 0
  }
  DEV_VIEW="${DESIRED_VIEW}"
  DEV_PRODUCT="${DESIRED_PRODUCT}"
  DEV_ROOT="${DEV_HOME}/${DESIRED_PRODUCT}/${DESIRED_VIEW}"

  export DEV_HOME DEV_VIEW DEV_PRODUCT DEV_ROOT

  [ -x "${DEV_ROOT}/src/scripts/${UTILITY}" ] || {
    ErrMsg "\"${DESIRED_VIEW}@${DESIRED_PRODUCT}\" does not exist."
    return 1
  }
  cd "${DEV_ROOT}/src" && {
    # exec 1>&3 2>&4
    tty -s 0<&1 && {
      eval `print_profile_commands`
      eval `print_path_commands`
      eval `print_info_command`

      exec ${SHELL}
    }
    print_view_commands
    print_profile_commands
    print_path_commands
    print_info_command

    return 0
  }
  ErrMsg "Cannot access a view directory."
  return 1
}

print_info_command()
{
  echo '
    echo "Development view is set to '"${DEV_VIEW}@${DEV_PRODUCT}"'" 1>&2 ;
  '
}

print_view_commands()
{
  echo '
    cd "'"${DEV_ROOT}"'"/src;

    DEV_VIEW="'"${DEV_VIEW}"'";
    DEV_PRODUCT="'"${DEV_PRODUCT}"'";
    DEV_HOME="'"${DEV_HOME}"'";
    DEV_ROOT="'"${DEV_ROOT}"'";
    export DEV_VIEW DEV_PRODUCT DEV_HOME DEV_ROOT;
  '
}

print_profile_commands()
{
  for directory in scripts project/scripts ../../.. ../.. ..; do
    [ -f "${DEV_ROOT}/src/${directory}/profile" ] && {
      echo '. "'"${DEV_ROOT}"'"/src/"'"${directory}"'"/profile;'
    }
  done
}

print_path_commands()
{
  CLEARPATHCMD="ruby -n -e 'puts split(%q{:}).uniq.reject{|c|c=~%r{^${DEV_HOME}/.*/.*/src}}.join(%q{:})'"
  echo '
    PATH='"`buildScriptsPath`"':`echo ${PATH} | '"${CLEARPATHCMD}"'`;
    LD_LIBRARY_PATH=`echo ${LD_LIBRARY_PATH} | '"${CLEARPATHCMD}"'`;
    CDPATH=.:'"${DEV_ROOT}"'/src/project:'"${DEV_ROOT}"'/src:'"${DEV_ROOT}"':`echo ${CDPATH} | '"${CLEARPATHCMD}"'`;
    export LD_LIBRARY_PATH PATH CDPATH;
  '
}

OnOption ()
{
  eval `EntryPoint 3 OnOption`

  case "${1}" in 
    a)
      SHOW_ALL=yes
    ;;
    *)
      return 1
    ;;
  esac
  return 0
}

OnArguments ()
{
  eval `EntryPoint 2 OnArguments`

  case "${#}" in 
    0)
    ;;
    1)
      DESIRED_VIEW=${1}
    ;;
    *)
      return 1
    ;;
  esac
  return 0
}

buildScriptsPath () 
{
    unset colon
    for directory in project/scripts scripts; do
      [ -d "${DEV_ROOT}/src/${directory}" ] && {
	printf "${colon}${DEV_ROOT}/src/${directory}"
	colon=":"
      }
    done
}

guessProduct ()
{
  products=`getProducts`
  eval `SetInputFields products`
  [ ${#} -ne 1 ] && {
    views=`echo ${products}|sed 's/\([a-zA-Z0-9_][a-zA-Z0-9_]*\)/'"${DESIRED_VIEW}"'@\1/g'`
    ErrMsg "${views} ?"
    return 1
  }
  echo ${1}
}

collectViews () 
{
  location=${DEV_HOME}
  : ${DEV_HOME:=${HOME}}

  VIEW_LIST=`getViews`
  eval `SetInputFields VIEW_LIST`

  [ ${#} -eq 0 -a "${location:+set}" != set ] && {
    prefix=`getPrefixes`
    eval `SetInputFields prefix`
    [ ${#} -ne 1 ] && {
      ErrMsg "Development views are scattered across directories, cannot continue."
      return 1
    }
    DEV_HOME=${HOME}/${prefix}
    VIEW_LIST=`getViews`
  }
  return 0
}

getPrefixes () 
{
  echo ${DEV_HOME}/*/*/*/src/scripts/${UTILITY} | tr ' ' '\n' | {
    sed -n 's%^'"${DEV_HOME}"'/\(.*\)/\(.*\)/\(.*\)/src/.*$%\1%p' | sort -u
  }
}

getProducts () 
{
  echo ${DEV_HOME}/*/${DESIRED_VIEW}/src/scripts/${UTILITY} | tr ' ' '\n' | {
    sed -n 's%^'"${DEV_HOME}"'/\(.*\)/\(.*\)/src/.*$%\1%p' | sort -u
  }
}

getViews ()
{
  echo ${DEV_HOME}/*/*/src/scripts/${UTILITY} | tr ' ' '\n' | {
    sed -n '
      s%^'"${DEV_HOME}"'/\([^*/]*\)/\([^*/]*\)/src/.*$%\2@\1%p
    '
  }
}

##################################################
## Here 'library.sh' must be copied or included ##
##################################################

##################
# Script Library #
##################

AskStr ()
{
  eval `EntryPoint 9 AskStr`

  message=${1}
  default=${2}
  ShowMsg ${first_question:+"\n"}"${message} [${default}] \c"
  read answer
  echo ${answer:-${default}}
}

AskYesNo ()
{
  eval `EntryPoint 9 AskYesNo`

  message=${1}
  default=${2}
  case `AskStr "${message}" "${default}"` in
    [yY]|[yY][eE][sS])
      return 0
    ;;
  esac
  return 1
}

SetArrayEntry ()
{
  eval `EntryPoint 9 SetArrayEntry`

  [ "${#}" -eq 3 ] && {
    array="${1}"
    index="${2}"
    entry="${3}"

    eval array_size='$'${array}_N
    [ "${index}" -ge "${array_size}" ] && {
      array_size=`expr "${index}" + 1`
      eval ${array}_N=${array_size}
    }
    eval ${array}_${index}='"'"${entry}"'"'
  }
}

GetArrayEntry ()
{
  eval `EntryPoint 9 GetArrayEntry`

  [ "${#}" -eq 2 ] && {
    array=${1}
    index=${2}
    eval echo '"''$'${array}_${index}'"'
  }
}

PrintArray ()
{
  eval `EntryPoint 9 PrintArray`

  [ ${#} -eq 1 ] && {
    array=${1}
    eval array_size='$'${array}_N
    array_size=`expr "${array_size}" + 0 2>/dev/null`
    [ "${array_size:+set}" = set ] && {
      ShowMsg "Array \"${array}\" (${array_size} elements)"
      cnt=0
      while [ "${cnt}" -lt "${array_size}" ]; do
	ShowMsg `GetArrayEntry "${array}" "${cnt}"`
	cnt=`expr "${cnt}" + 1`
      done
      return 0
    }
  }
  return 1
}

SetInputFields ()
{
  eval `EntryPoint 9 SetInputFields`

  [ ${#} -eq 2 -o ${#} -eq 1 ] && {
    variable="${1}"
    if [ ${#} -eq 2 ]; then
      echo 'separator="'"${2}"'";'
    else
      echo 'separator="${IFS}";'
    fi
    echo '
      ifs="${IFS}";
      IFS="${separator}";
      set entry ${'"${variable}"'};
      shift;
      IFS="${ifs}"
    '
  }
}

tolower () 
{
  eval `EntryPoint 9 tolower`

  ${awk} '
    BEGIN {
      print tolower("'"${*}"'")
    }
  '
}

toupper () 
{
  eval `EntryPoint 9 toupper`

  ${awk} '
    BEGIN {
      print toupper("'"${*}"'")
    }
  '
}

ParseCommandParameters ()
{
  eval `EntryPoint 9 ParseCommandParameters`

  [ ${#} -eq 0 ] && {
    return 1
  }
  options="${1}"
  shift
  [ ${#} -eq 0 ] || {
    while getopts "hx:${options}" opt 2>/dev/null; do
      case "${opt}" in
        h)
	  trap CleanUp 0
          PrintUsage
          PrintDescription
          exit 0
        ;;
        x)
          DebugLevel=${OPTARG}
          [ "${DebugLevel}" -ge 1 ] && {
            exec 1>&3 2>&4
          }
        ;;
        *)
	  CheckFunction OnOption && {
	    OnOption "${opt}" "${OPTARG}" && {
	      continue
	    }
	  }
          return 2
        ;;
      esac
    done
    shift `expr "${OPTIND}" - 1`
  }
  CheckFunction OnArguments && {
    OnArguments "${@}"
    return "${?}"
  }
  return 0
}

ErrMsg () 
{
  eval `EntryPoint 9 ErrMsg`

  echo "${ScriptName}: ${*}" 1>&4 2>&1
}

ShowMsg () 
{
  eval `EntryPoint 9 ShowMsg`

  if [ ${#} -ne 0 ]; then
    echo "${*}" 1>&3 2>&4
  else
    sed 's/^[ 	][ 	]*//g' 1>&3 2>&4
  fi
}

WrapUp ()
{
  eval `EntryPoint 9 WrapUp`

  ${awk} -v margin="${1}" '
    BEGIN{
      if(margin !~ /^[0-9]+$/){
        margin = 70
      }
    }
    {
      total = 0
      string = ""
      for(field=1; field<=NF ;field++){
        string = string $field " "
        total += length($field)+1
        if(total>=margin){
          print string
          string = ""
          total = 0
        }
      }
      if(total>0){
        print string
      }
    }
  '
}

ShowBox ()
{
  eval `EntryPoint 9 ShowBox`

  ${awk} -v header="${1}" -v prefix="${2}" '
    BEGIN {
      if(prefix ~ /^[0-9]+$/){
        prefix = sprintf("%" prefix "." prefix "s"," ")
      }
      header_len = length(header)
      maxlen = header_len
      if(maxlen){
        maxlen += 2
      }
      line = 0
    }
    $0 !~ /^[ \t]*$/ {
      s = $0
      if(sub("^[ \t]*:","",s)!=1){
        sub("^[ \t]*","",s)
        sub("[ \t]*$","",s)
      }
      len = length(s)
      if(len>maxlen){
        maxlen = len
      }
      array[line++] = s
    }
    END {
      w = maxlen + 4
      empty = sprintf("|%" w "." w "s|"," ")
      bottom = sprintf("+%" w "." w "s+"," ")
      gsub(" ","-",bottom)

      if(header_len>0){
        len = (maxlen/2)-(header_len/2+1)+3
        top = sprintf("%s %s ",substr(bottom,1,len),header)
        top = top substr(bottom,len+header_len+3)
      }
      else{
        top = bottom
      }
      printf("%s%s\n%s%s\n",prefix,top,prefix,empty)
      w = maxlen
      for(count=0; count<line ;count++){
        printf("%s|  %-" w "." w "s  |\n",prefix,array[count])
      }
      printf("%s%s\n%s%s\n",prefix,empty,prefix,bottom)
    }
  ' 1>&3 2>&4
}

runEcho ()
{
  eval `EntryPoint 9 runEcho`

  ShowMsg "${*}"
  "${@}" 1>&3 2>&4
  return ${?}
}

GenDirPath () 
{
  eval `EntryPoint 9 GenDirPath`

  [ ${#} -eq 1 ] && {
    (cd "${1}">/dev/null 2>&1  && pwd)
  }
  return ${?}
}

SplitOutput ()
{
  eval `EntryPoint 9 SplitOutput`

  while read line; do
    echo "${line}"
    echo "${line}" 1>&5
  done
}

ShowProgress () 
{
  eval `EntryPoint 9 ShowProgress`

  cnt=0
  max=${2:-70}

  while read line;do
    [ "${cnt}" -eq 0 ] && ShowMsg "${1:- } \c"
    cnt=`expr "${cnt}" + 1`
    ShowMsg ".\c"
    [ ${cnt} -gt "${max}" ] && {
      ShowMsg ""
      cnt=0
    }
  done
  [ ${cnt} -eq 0 ] || {
    ShowMsg ""
  }
}

CheckGroupExistence ()
{
  eval `EntryPoint 9 CheckGroupExistence`

  [ ${#} -eq 1 ] && {
    ${awk} -F: -v group=${1} -v status=1 "${awkLibrary}"'
      $0~/^[ \t]*#/ || $0~/^[ \t]*$/ {
        next
      }
      NF>1 {
        field = trim($1)
        if(field==group){
          status = 0
          exit
        }
      }
      END{
        exit(status)
      }
    ' /etc/group
  }
  return ${?}
}

GetCurUserGroup ()
{
  eval `EntryPoint 9 GetCurUserGroup`

  id|sed -n 's/^.*(\(.*\)).*(\(.*\)).*$/\1 \2/p'
}

GetCurUser ()
{
  eval `EntryPoint 9 GetCurUser`

  set entry `GetCurUserGroup`
  shift

  [ ${#} -eq 2 ] && {
    echo ${1}
  }
}

GetCurGroup ()
{
  eval `EntryPoint 9 GetCurGroup`

  set entry `GetUserGroup`
  shift

  [ ${#} -eq 2 ] && {
    echo ${2}
  }
}

CheckFunction ()
{
  eval `EntryPoint 9 CheckFunction`

  [ ${#} -eq 1 ] && {
    name=${1}
    set entry `type "${name}" 2>/dev/null`
    shift
    case "${*}" in
      "${name} is a function"*)
	return 0
      ;;
    esac
  }
  return 1
}

CheckProgram ()
{
  eval `EntryPoint 9 CheckProgram`

  [ ${#} -eq 1 ] && {
    name=${1}
    set entry `type "${name}" 2>/dev/null`
    shift
    [ ${#} -eq 3 -a "${1}" = ${name} -a "${2}" = "is" ] && {
      [ `basename "${3}"` = "${name}" ] && {
	echo "${3}"
	return 0
      }
    }
  }
  return 1
}

CheckVars () 
{
  eval `EntryPoint 9 CheckVars`

  for v in "${@}"; do
    eval var=\$${v}
    [ "${var:+set}" = set ] || {
      ErrMsg "${v} is not set or bad."
      return 1
    }
  done
  return 0
}

PrintVars () 
{
  eval `EntryPoint 9 PrintVars`

  for v in "$@"; do
    eval echo ${v}=\$${v}
  done
}

VerifyDir () 
{
  eval `EntryPoint 9 VerifyDir`

  eval test -d "${1}" -a -r "${1}"
  return ${?}
}

VerifyFile () 
{
  eval `EntryPoint 9 VerifyFile`

  eval test -f "${1}" -a -r "${1}"
  return ${?}
}

VerifyProg () 
{
  eval `EntryPoint 9 VerifyProg`

  eval test -f "${1}" -a -x "${1}"
  return ${?}
}

ExtractValues () 
{
  eval `EntryPoint 9 ExtractValues`

  [ ${#} -gt 1 ] && {
    file=${1}
    unset pattern
    shift

    for arg in "${@}"; do
      arg=`echo ${arg}|sed -n '/^[a-zA-Z][a-zA-Z1-9_]*$/p'`
      [ "${arg:+set}" = set ] && {
        [ "${pattern:+set}" = set ] && {
          pattern="${pattern};"
        }
        search='^[ 	]*'"${arg}"'=\([^`;]*\)[ 	]*$'
        replace="${arg}="\''\1'\'
        pattern="${pattern}s/${search}/${replace}/gp"
      }
    done
    [ "${pattern:+set}" = set ] && VerifyFile "${file}" && {
      eval `sed -n "${pattern}"<"${file}"`
    }
  }
}

EntryPoint () 
{
  echo '
    trap CleanUp ${SigList};
  '
  [ "${DebugLevel:-0}" -ge "${1:-1}" ] && {
    echo '
      echo "[Function: '"${2:-?}"']" 1>&2; 
      set -xv;
    '
  }
}

CLEANUP_LIST=
CleanUp () 
{
  eval `EntryPoint 5 CleanUp`
  trap '' ${SigList}

  cd /
  [ "${ShowCleanupMessage}" = YES ] && {
    ErrMsg "Cleaning up, please wait"
  }
  CheckFunction OnCleanUp && {
    OnCleanUp
  }
  set entry ${CLEANUP_LIST}; shift
  for entry in "${@}"; do
    eval value=\"${entry}\"
    [ "${value:+set}" = set ] && {
      rm -rf "${value}"
    }
  done
  unset CLEANUP_LIST
}

UpdateCleanupList ()
{
  eval `EntryPoint 5 UpdateCleanupList`

  for arg in "${@}"; do
    CLEANUP_LIST="${CLEANUP_LIST} ${arg}"
  done
}

PrintUsage () 
{
  eval `EntryPoint 9 PrintUsage`

  echo "${ARGUMENTS:-[-h][-x<debug level>]}"|${awk} "$awkLibrary"'
    BEGIN {
      prefix = "USAGE: '"${ScriptName}"'"
      len = length(prefix)
      printf("\n")
    }
    $0 !~ /^[ \t]*$/ {
      printf("%" len "." len "s %s\n",prefix,trim($0));
      prefix = ""
    }
    END {
      printf("\n")
    }
  ' 1>&4
}

PrintDescription ()
{
  eval `EntryPoint 9 PrintDescription`
  {
    echo "DESCIPTION:" 
    echo "${DESCRIPTION}"|sed '/^[ 	]*$/d;s/^[ 	]*/  /'
  } 1>&4
}

awkLibrary='
  function trim(str){
    sub("^[ \t]*","",str)
    sub("[ \t]*$","",str)
    return str
  }
'

########
# MAIN #
########

exec 3>&1 4>&2 5>/dev/null

awk=`(CheckProgram nawk)` || {
  awk=awk
}
ScriptRundir=`pwd`
ScriptIssue=`(CheckProgram "${0}")` || {
  ScriptIssue="${0}"
}
ScriptName=`basename ${ScriptIssue}`
ScriptDir=`dirname "${ScriptIssue}"`

umask 02

UpdateCleanupList '${ERRLOG}'
trap CleanUp 0 ${SigList}

ERRLOG="/tmp/${ScriptName}.${$}"
> "${ERRLOG}"

[ "${RedirectErrors}" = YES ] && exec 2>"${ERRLOG}" 1>&2
[ "${ShowProdStamp}" = YES ] &&  ShowMsg "${PRODSTAMP}"

CheckFunction main || {
  ErrMsg "No main()"
  exit 2
}
main "${@}"
exit "${?}"
