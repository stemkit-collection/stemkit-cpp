%include "stl.i"
%include "typemaps.i"
%include "exception.i"

%{
#include <sk/rt/config/UprootLocator.h>
#include <sk/rt/config/CwdUprootLocator.h>
#include <sk/rt/config/HomeLocator.h>
#include <sk/rt/config/InlineLocator.h>
#include <sk/rt/scope/Controller.h>
#include <sk/rt/Scope.h>

using sk::rt::config::StreamProcessor;
using sk::rt::config::NamedStreamOpener;

#include "LoggerAdaptor.h"
#include <sk/util/SystemExit.h>

#include <stdlib.h>
#include <unistd.h>
#include <iostream>

%}

%template("StringHash") std::map<std::string, std::string>;

%exception {
  try {
    $action
  }
  catch(const sk::util::SystemExit& exception) {
    std::cerr << exception.getMessage() << std::endl;
    exit(exception.getCode());
  }
  catch(const std::exception& exception) {
    SWIG_exception(SWIG_RuntimeError, exception.what());
    throw;
  }
}

%apply std::string { sk::util::String }
%apply const std::string& { const sk::util::String& }

%apply bool { sk::util::Boolean }

%typemap(in) sk::util::String
%{ 
   if(!$input) {
     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null sk::util::String");
     return $null;
    } 
    const char *$1_pstr = (const char *)jenv->GetStringUTFChars($input, 0); 
    if (!$1_pstr) return $null;
    $1 =  sk::util::String($1_pstr);
    jenv->ReleaseStringUTFChars($input, $1_pstr); 
%}

%typemap(in) const sk::util::String &
%{ 
  if(!$input) {
     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null sk::util::String");
     return $null;
   }
   const char *$1_pstr = (const char *)jenv->GetStringUTFChars($input, 0); 
   if (!$1_pstr) return $null;
   sk::util::String $1_str($1_pstr);
   $1 = &$1_str;
   jenv->ReleaseStringUTFChars($input, $1_pstr); 
%}

%ignore getClass;
%ignore *::SpotLocator::openStream;
%ignore *::Scope::operator=;
%ignore *::Scope::getProperty(const sk::util::String& name, const char* fallback) const;

%include <sk/rt/config/Locator.h>
%include <sk/rt/config/SpotLocator.h>
%include <sk/rt/config/UprootLocator.h>
%include <sk/rt/config/CwdUprootLocator.h>
%include <sk/rt/config/HomeLocator.h>
%include <sk/rt/config/InlineLocator.h>

%ignore *::Controller::getAggregator;

%include <sk/rt/scope/Controller.h>

%ignore *::Scope::error;
%ignore *::Scope::stat;
%ignore *::Scope::warning;
%ignore *::Scope::notice;
%ignore *::Scope::info;
%ignore *::Scope::debug;
%ignore *::Scope::detail;

%ignore *::LoggerAdaptor::LoggerAdaptor;

%include <sk/rt/Scope.h>
%include "LoggerAdaptor.h"

%extend sk::rt::Scope {
  const ruby::LoggerAdaptor logger() const {
    return ruby::LoggerAdaptor(*$self);
  }
}

%extend sk::rt::config::SpotLocator {
  SpotLocator(const sk::util::String& item, const sk::util::String& location) {
    return new sk::rt::config::SpotLocator(item, location);
  }
}

%extend sk::rt::config::UprootLocator {
  UprootLocator(const sk::util::String& item, const sk::util::String& location) {
    return new sk::rt::config::UprootLocator(item, location);
  }
}
