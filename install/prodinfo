# vim: set ft=ruby sw=2:

cache.platform = TSC::Platform.current.name
cache.os = TSC::Platform.current.driver

product {
  name 'SK'
  description 'Stemkit'

  top ENV['CONTRIB_ROOT'] || '/usr/local'
  base "stemkit-0.8"

  package {
    name 'cpp'
    description 'C++ ojbect libraries'

    tasks %w{
      system-query-top
      system-create-files
      system-set-permissions
    }
    filesets %w{
      main util sys io other rt ruby-rt java-rt cppunit preload
    }
  }
}

fileset {
  name "main"

  directory %w{
    bin
  }
  generate.as('bin/stemkit-info').source {
    program 'install/make-info.rb'
  }
}

fileset {
  name 'util'

  directory %w{
    include/sk/util
    lib
  }
  install.as('include/sk/util').source {
    tree('include/sk/util') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }
  install.into('lib').binary {
    list = %w{
      sk.util
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'io'

  directory %w{
    include/sk/io
    lib
  }
  install.as('include/sk/io').source {
    tree('include/sk/io') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.io
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'preload'

  directory %w{
    lib
  }
  install.into('lib').binary {
    if ENV['MAKE_DLL'] == 'true'
      program 'lib/sk/preload' => [
        "sk.preload.control.#{Module.library_extension}",
        "sk.preload.print.#{Module.library_extension}"
      ]
    end
  }
}

fileset {
  name 'ruby-rt'

  directory %w{
    lib
    lib/sk
    lib/sk/rt
  }
  install.as('lib/sk/rt').source {
    tree('extensions/ruby/sk/rt') { |_location, _item|
      case _item
        when '.svn'
          nil
        when %r{^.+-spec.rb$}
          false
        else
          true
      end
    }
  }
  install.into('lib/sk').binary {
    program 'extensions/ruby/sk/rt.so'
  }
}

fileset {
  name 'java-rt'

  directory %w{
    lib
    lib/net
    lib/net/sf
    lib/net/sf/sk
    lib/net/sf/sk/rt
  }
  install.into('lib/net/sf/sk').source.file 'extensions/java/net/sf/sk/rt.rb'
  install.into('lib/net/sf/sk/rt').source.file 'extensions/java/net/sf/sk/rt/scope.rb'

  install.into('lib').binary {
    program 'extensions/java/net/sf/sk/libnet.sf.sk.rt.rt.so'
    file 'extensions/java/net/sf/sk/net.sf.sk.rt.rt.jar'
  }
}

fileset {
  name 'rt'

  directory %w{
    include/sk/rt
    include/sk/rt/logger
    lib
  }
  install.as('include/sk/rt').source {
    tree('include/sk/rt') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.rt.bundle
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'other'

  directory %w{
    include
    include/sk
    include/sk/other
    include/sk/other/tinyxml
    lib
  }
  install.as('include/sk/other').source {
    tree('include/sk/other') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.other.tinyxml
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'sys'

  directory %w{
    include/sk/sys
    lib
  }
  install.as('include/sk/sys').source {
    tree('include/sk/sys') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.sys
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'cppunit'

  directory %w{
    include
    include/sk
    include/sk/cppunit
    include/hooks/cppunit
    lib
  }
  install.as('include/sk/cppunit').source {
    tree('include/sk/cppunit') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.as('include/hooks/cppunit').source {
    tree('include/hooks/cppunit') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }
  install.into('lib').binary {
    list = %w{
      sk.cppunit
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

