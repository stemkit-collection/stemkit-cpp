# vim: set ft=ruby:

cache.platform = TSC::Platform.current.name
cache.os = TSC::Platform.current.driver

product {
  name 'SK'
  description 'Stemkit'

  top '/usr/local/stemkit-0.3'
  version '0.3'

  case cache.platform
    when 'cygwin-xp-x86'
      user 'Guest'
      group 'Guests'
    else
      user 'root'
      group 'bin'
  end

  package {
    name 'cpp'
    description 'C++ ojbect libraries'

    tasks %w{
      system-query-top
      system-create-files
      system-set-permissions
    }
    filesets %w{
      main util sys io rt cppunit
    }
  }
}

fileset {
  name "main"

  directory %w{
    bin
  }
  generate.as('bin/stemkit-info').source {
    program 'install/make-info.rb'
  }
}

fileset {
  name 'util'

  directory %w{
    include/sk/util
    lib
  }
  install.as('include/sk/util').source {
    tree('include/sk/util') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }
  install.into('lib').binary {
    list = %w{
      sk.util
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'io'

  directory %w{
    include/sk/io
    lib
  }
  install.as('include/sk/io').source {
    tree('include/sk/io') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.io
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'rt'

  directory %w{
    include/sk/rt
    include/sk/rt/logger
    lib
  }
  install.as('include/sk/rt').source {
    tree('include/sk/rt') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.rt.bundle
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'sys'

  directory %w{
    include/sk/sys
    lib
  }
  install.as('include/sk/sys').source {
    tree('include/sk/sys') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }

  install.into('lib').binary {
    list = %w{
      sk.sys
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

fileset {
  name 'cppunit'

  directory %w{
    include/sk/cppunit
    lib
  }
  install.as('include/sk/cppunit').source {
    tree('include/sk/cppunit') { |_location, _item|
      case _item
        when '.svn'
          nil
        else
          true
      end
    }
  }
  install.into('lib').binary {
    list = %w{
      sk.cppunit
    }
    if ENV['MAKE_DLL'] == 'true'
      library 'lib' => list
    else
      static_library 'lib' => list
    end
  }
}

